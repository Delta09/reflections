1. What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository it tells git that I am going to start uploading and saving these files. It essentially creates a .git file.
We need to do it in order to start making commits.


2. How is the staging area different from the working directory and the repository? What value do you think it offers?
staging area only prepares the files in the working directory to be added to the repository.


3. How can you use the staging area to make sure you have one commit per logical change?
You can check to see what files are staged and if the should be committed together


4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When you want to add experimental features but have an already working version of the program. Branches allow you to split off and work on the code without affecting the master branch


5. How do the diagrams help you visualize the branch structure?
Let us see the latest commit they share before the split


6.What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
merging two branch akes it into one. you represent it that way to show it is now one entity.




7.What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Pros: useful when code is different Cons: does not get rid of redundant code
